name: Build and Publish
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  HOME: /root
  NIX_CONFIG: |
    experimental-features = nix-command flakes
    max-jobs = auto
    cores = 0

permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-all:
    runs-on: self-hosted
    outputs:
      eval-success: ${{ steps.eval-check.outputs.success }}
      website-built: ${{ steps.build-website.outputs.success }}
    steps:
      - name: 🏠 Set up environment
        run: |
          echo "HOME=/root" >> $GITHUB_ENV
          echo "USER=root" >> $GITHUB_ENV
          echo "Environment setup complete:"
          echo "HOME: /root"
          echo "USER: root"

      - name: 🌱 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🛠️ Install Dependencies
        run: |
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi

      - name: 👥 Create nixbld group and users
        run: |
          if ! getent group nixbld >/dev/null; then
            sudo groupadd -r nixbld
            echo "✅ Created nixbld group"
          else
            echo "✅ nixbld group already exists"
          fi
          
          for i in $(seq 1 10); do
            if ! getent passwd nixbld$i >/dev/null; then
              sudo useradd -r -g nixbld -G nixbld -d /var/empty -s /sbin/nologin -c "Nix build user $i" nixbld$i
              echo "✅ Created nixbld$i user"
            else
              echo "✅ nixbld$i user already exists"
            fi
          done

      - name: ❄️ Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            experimental-features = nix-command flakes
            max-jobs = 4
            cores = 2
            trusted-users = root
            sandbox = false
            keep-env-derivations = true
            keep-outputs = true

      - name: 🧪 Show available outputs
        run: |
          nix flake show

      - name: 🖥️ Evaluate NixOS configurations
        id: eval-check
        run: |
          nix flake show | grep -A 20 nixosConfigurations || true
          
          nix eval --raw .#nixosConfigurations.main.config.system.build.toplevel.drvPath
          echo "✅ Main configuration evaluation successful"
          
          nix eval --raw .#nixosConfigurations.wsl.config.system.build.toplevel.drvPath
          echo "✅ WSL configuration evaluation successful"
          
          nix eval --raw .#nixosConfigurations.server.config.system.build.toplevel.drvPath
          echo "✅ Server configuration evaluation successful"
          
          nix eval --raw .#notebook.drvPath || echo "Notebook derivation not available"
          echo "✅ Notebook evaluation successful"        
          
          nix build .#nixosConfigurations.main.config.system.build.toplevel --no-link --print-build-logs
          
          echo "success=true" >> $GITHUB_OUTPUT

      - name: 🔍 Additional validation
        run: |
          nix flake check --no-build
          nix flake metadata

      - name: 🔧 Build the website/notebook
        id: build-website
        run: |
          nix build .#notebook --print-build-logs
          echo "success=true" >> $GITHUB_OUTPUT

      - name: 📁 Prepare website files for deployment
        id: prepare-website
        run: |
          mkdir -p website-deploy
          if [[ -L ./result ]]; then
            REAL_PATH=$(readlink -f ./result)          
            rsync -avL --chmod=u+w "$REAL_PATH/" website-deploy/
          else
            rsync -avL --chmod=u+w ./result/ website-deploy/
          fi

      - name: ⬆️ Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./website-deploy/

      - name: 📊 Show store usage and cleanup
        run: |
          echo "=== Final disk usage ==="
          df -h
          
          echo "=== Nix store info ==="
          nix path-info --all --size --human-readable | tail -10 || echo "Could not get store info"

  deploy-pages:
    needs: build-all
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-all.outputs.website-built == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
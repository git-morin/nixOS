name: Build and Publish NixOS ISO Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      hosts:
        description: 'Hosts to build a ISO from (comma-separated or "all")'
        required: false
        default: 'main,server'
        type: string
      upload_artifacts:
        description: 'Upload ISO artifacts'
        required: false
        default: true
        type: boolean
      publish_packages:
        description: 'Create GitHub release with ISOs'
        required: false
        default: true
        type: boolean

env:
  HOME: /home/runner
  NIX_CONFIG: |
    experimental-features = nix-command flakes
    max-jobs = auto
    cores = 0

permissions:
  contents: write
  packages: read

jobs:
  evaluate:
    runs-on: self-hosted
    outputs:
      eval-success: ${{ steps.eval-check.outputs.success }}
    steps:
      - name: 🏠 Set up environment
        run: |
          echo "HOME=${HOME:-/tmp/runner-home}" >> $GITHUB_ENV
          echo "USER=${USER:-runner}" >> $GITHUB_ENV
          mkdir -p "${HOME:-/tmp/runner-home}"

      - name: 🌱 Checkout
        uses: actions/checkout@v4

      - name: 🧹 Nuclear Nix cleanup - Phase 1 (Processes)
        run: |
          echo "=== Killing all Nix processes ==="
          sudo pkill -9 -f nix-daemon || true
          sudo pkill -9 -f nix || true
          sudo pkill -9 -f nixbld || true
          sleep 3
          
          echo "=== Stopping systemd services ==="
          sudo systemctl stop nix-daemon.service || true
          sudo systemctl stop nix-daemon.socket || true
          sudo systemctl disable nix-daemon.service || true
          sudo systemctl disable nix-daemon.socket || true
          sudo systemctl reset-failed || true

      - name: 🧹 Nuclear Nix cleanup - Phase 2 (Filesystem)
        run: |
          echo "=== Unmounting any Nix mounts ==="
          sudo umount -f /nix/store 2>/dev/null || true
          sudo umount -f /nix 2>/dev/null || true
          
          echo "=== Removing Nix directories ==="
          sudo rm -rf /nix || true
          sudo rm -rf /etc/nix || true
          sudo rm -rf /etc/systemd/system/nix-daemon.* || true
          sudo rm -rf /etc/systemd/system/multi-user.target.wants/nix-daemon.* || true
          
          echo "=== Cleaning user profiles ==="
          sudo rm -rf /root/.nix-* || true
          sudo rm -rf /home/*/.nix-* || true
          sudo rm -rf /tmp/nix-* || true
          
          echo "=== Cleaning environment ==="
          sudo rm -rf /etc/profile.d/nix.sh || true
          sudo sed -i '/nix/d' /etc/environment 2>/dev/null || true
          sudo sed -i '/nix/d' /etc/profile 2>/dev/null || true

      - name: 🧹 Nuclear Nix cleanup - Phase 3 (Users/Groups)
        run: |
          echo "=== Removing Nix users and groups ==="
          for i in {1..32}; do
            sudo userdel "nixbld$i" 2>/dev/null || true
          done
          sudo groupdel nixbld 2>/dev/null || true
          
          echo "=== Reloading systemd ==="
          sudo systemctl daemon-reload
          
          echo "=== Cleanup complete, waiting for system to settle ==="
          sleep 5

      - name: ❄️ Fresh Nix installation with nixbuild action
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            experimental-features = nix-command flakes
            max-jobs = 4
            cores = 2
            build-users-group = nixbld
            trusted-users = root runner

      - name: 🔧 Verify and configure Nix
        run: |
          echo "=== Testing Nix installation ==="
          nix --version
          nix-daemon --version || true
          
          echo "=== Nix store status ==="
          nix store ping || echo "Store ping failed"
          
          echo "=== Configuration check ==="
          nix show-config | head -10

      - name: 🧪 Show available outputs
        run: |
          nix flake show

      - name: 🖥️ Evaluate NixOS configurations
        id: eval-check
        run: |
          echo "=== Showing available configurations ==="
          nix flake show | grep -A 20 nixosConfigurations || true
                    
          echo "=== Evaluating main configuration ==="
          nix eval --raw .#nixosConfigurations.main.config.system.build.toplevel.drvPath
          echo "✅ Main configuration evaluation successful"
          
          echo "=== Evaluating WSL configuration ==="
          nix eval --raw .#nixosConfigurations.wsl.config.system.build.toplevel.drvPath
          echo "✅ WSL configuration evaluation successful"
          
          echo "=== Evaluating Server configuration ==="
          nix eval --raw .#nixosConfigurations.server.config.system.build.toplevel.drvPath
          echo "✅ Server configuration evaluation successful"
          
          echo "=== Checking for ISO configurations ==="
          if nix eval --raw .#nixosConfigurations.main-iso.config.system.build.toplevel.drvPath 2>/dev/null; then
            echo "✅ Main ISO configuration evaluation successful"
          else
            echo "⚠️ Main ISO configuration not found - checking what's available"
            nix eval --apply 'configs: builtins.attrNames configs' .#nixosConfigurations
          fi
          
          echo "success=true" >> $GITHUB_OUTPUT

      - name: 🔍 Additional validation
        run: |
          nix flake check --no-build || echo "Flake check found issues (this is expected for evaluation-only)"
          nix flake metadata

      - name: 📊 Show store usage
        run: |
          df -h /nix 2>/dev/null || echo "Could not check /nix filesystem"
          nix path-info --all --size --human-readable | tail -10 || echo "Could not get store info"

  prepare:
    needs: evaluate
    runs-on: self-hosted
    if: needs.evaluate.outputs.eval-success == 'true'
    outputs:
      hosts: ${{ steps.set-hosts.outputs.hosts }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 🎯 Determine hosts to build
        id: set-hosts
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            INPUT_HOSTS="${{ github.event.inputs.hosts }}"
          else
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              INPUT_HOSTS=""
            else
              INPUT_HOSTS="all"
            fi
          fi
          
          if [[ "$INPUT_HOSTS" == "all" ]]; then
            HOSTS="main,server"
          else
            HOSTS="$INPUT_HOSTS"
          fi
          
          echo "hosts=$HOSTS" >> $GITHUB_OUTPUT
          echo "Building ISOs for hosts: $HOSTS"

      - name: 🔧 Set build matrix
        id: set-matrix
        run: |
          HOSTS="${{ steps.set-hosts.outputs.hosts }}"
          if [[ -z "$HOSTS" ]]; then
            echo "matrix={\"host\":[]}" >> $GITHUB_OUTPUT
            echo "Matrix: empty (no builds for this trigger)"
          else
            HOSTS_JSON=$(echo "$HOSTS" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
            echo "matrix={\"host\":$HOSTS_JSON}" >> $GITHUB_OUTPUT
            echo "Matrix: $HOSTS_JSON"
          fi

  build-iso:
    needs: [evaluate, prepare]
    runs-on: self-hosted
    if: needs.evaluate.outputs.eval-success == 'true' && needs.prepare.outputs.hosts != ''
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false

    outputs:
      iso-built: ${{ steps.build-result.outputs.success }}
      iso-path: ${{ steps.build-result.outputs.iso_path }}
      iso-name: ${{ steps.build-result.outputs.iso_name }}

    steps:
      - name: 🏠 Set up environment
        run: |
          echo "HOME=${HOME:-/tmp/runner-home}" >> $GITHUB_ENV
          echo "USER=${USER:-runner}" >> $GITHUB_ENV
          mkdir -p "${HOME:-/tmp/runner-home}"

      - name: 🌱 Checkout
        uses: actions/checkout@v4

      - name: 🧹 Clean up build artifacts
        run: |
          sudo rm -rf /tmp/nixos-iso-* || true
          sudo rm -rf result* || true
          
          docker system prune -af || true
          docker image prune -af || true
          
          echo "=== Disk usage before build ==="
          df -h

      - name: 🔧 Verify Nix is ready
        run: |
          echo "=== Testing Nix installation ==="
          nix --version
          nix store ping
          
          echo "=== Quick flake test ==="
          nix flake show --json > /dev/null
          
          echo "✅ Nix is ready for building"

      - name: 🏗️ Build ISO image for ${{ matrix.host }}
        id: build-result
        run: |
          echo "=== Pre-evaluating ISO configuration ==="
          nix eval --raw .#nixosConfigurations.${{ matrix.host }}-iso.config.system.build.toplevel.drvPath
          
          echo "=== Building ISO for ${{ matrix.host }} ==="
          nix build --print-build-logs .#nixosConfigurations.${{ matrix.host }}-iso.config.system.build.isoImage \
            --extra-experimental-features "nix-command flakes" \
            --max-jobs 4 \
            --cores 2 \
            --keep-going \
            || (echo "❌ ISO build failed for ${{ matrix.host }}" && exit 1)
          
          echo "success=true" >> $GITHUB_OUTPUT

      - name: 📦 Prepare ISO artifact
        run: |
          ISO_PATH=$(find result/iso -name "*.iso" -type f | head -1)
          
          if [[ -z "$ISO_PATH" ]]; then
            echo "❌ No ISO found in result/iso/"
            find result -name "*.iso" -type f 2>/dev/null || true
            ls -la result/ || true
            exit 1
          fi
          
          ISO_NAME=$(basename "$ISO_PATH")
          ISO_SIZE=$(du -h "$ISO_PATH" | cut -f1)
          mkdir -p artifacts
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          NEW_ISO_NAME="nixos-${{ matrix.host }}-${TIMESTAMP}.iso"
          
          echo "📦 Copying ISO: $ISO_PATH -> artifacts/${NEW_ISO_NAME}"
          cp "$ISO_PATH" "artifacts/${NEW_ISO_NAME}"
          
          cat > "artifacts/nixos-${{ matrix.host }}-metadata.json" << EOF
          {
            "host": "${{ matrix.host }}",
            "iso_name": "${NEW_ISO_NAME}",
            "original_name": "$ISO_NAME",
            "iso_size": "$ISO_SIZE",
            "build_date": "$(date -Iseconds)",
            "commit_sha": "${{ github.sha }}",
            "commit_ref": "${{ github.ref_name }}",
            "workflow_run_id": "${{ github.run_id }}",
            "download_url": "Release assets in GitHub repository"
          }
          EOF
          
          echo "iso_path=artifacts/${NEW_ISO_NAME}" >> $GITHUB_OUTPUT
          echo "iso_name=${NEW_ISO_NAME}" >> $GITHUB_OUTPUT
          
          echo "✅ ISO ready: ${NEW_ISO_NAME} (${ISO_SIZE})"

      - name: ⬆️ Upload ISO artifact
        if: ${{ github.event.inputs.upload_artifacts != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: nixos-${{ matrix.host }}-iso
          path: artifacts/
          retention-days: 30
          compression-level: 0

      - name: 📊 Post-build cleanup and stats
        run: |
          sudo rm -rf result* || true
          
          echo "=== Final disk usage ==="
          df -h
          
          echo "=== Nix store info ==="
          nix path-info --all --size --human-readable | tail -5 || echo "Could not get store info"

  create-release:
    needs: [evaluate, prepare, build-iso]
    runs-on: self-hosted
    if: needs.evaluate.outputs.eval-success == 'true' && needs.build-iso.result == 'success' && github.event_name != 'pull_request' && github.event.inputs.publish_packages != 'false'
    steps:
      - name: 🌱 Checkout
        uses: actions/checkout@v4

      - name: ⬇️ Download all ISO artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 📦 Prepare release assets
        id: prepare-assets
        run: |
          mkdir -p release-assets-final
          
          ASSET_LIST=""
          RELEASE_NOTES="## NixOS ISO Images\n\nBuilt from commit \`${{ github.sha }}\` on $(date -Iseconds)\n\n### Build Information\n- **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n- **Commit**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n- **Branch/Tag**: \`${{ github.ref_name }}\`\n\n### Available Images\n\n"
          
          for host_dir in release-artifacts/nixos-*-iso; do
            if [[ -d "$host_dir" ]]; then
              host_name=$(basename "$host_dir" | sed 's/nixos-\(.*\)-iso/\1/')
              ISO_FILE=$(find "$host_dir" -name "*.iso" | head -1)
              METADATA_FILE=$(find "$host_dir" -name "*metadata.json" | head -1)
          
              if [[ -f "$ISO_FILE" && -f "$METADATA_FILE" ]]; then
                cp "$ISO_FILE" release-assets-final/
                cp "$METADATA_FILE" release-assets-final/
                ISO_NAME=$(basename "$ISO_FILE")
                ISO_SIZE=$(du -h "$ISO_FILE" | cut -f1)
                ASSET_LIST="$ASSET_LIST release-assets-final/$ISO_NAME"
          
                ISO_SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)
                echo "$ISO_SHA256  $ISO_NAME" > "release-assets-final/${ISO_NAME}.sha256"
                ASSET_LIST="$ASSET_LIST release-assets-final/${ISO_NAME}.sha256"
          
                RELEASE_NOTES="${RELEASE_NOTES}#### 🖥️ $host_name\n- **File**: \`$ISO_NAME\`\n- **Size**: $ISO_SIZE\n- **SHA256**: \`$ISO_SHA256\`\n- **Configuration**: nixosConfigurations.$host_name-iso\n\n"
              else
                echo "⚠️  Warning: Missing files for $host_name"
                echo "  ISO_FILE: $ISO_FILE"
                echo "  METADATA_FILE: $METADATA_FILE"
              fi
            fi
          done
          
          if [[ -z "$ASSET_LIST" ]]; then
            echo "❌ No assets found to release!"
            exit 1
          fi
          
          RELEASE_NOTES="${RELEASE_NOTES}### Usage\n\n1. Download the appropriate ISO for your target system\n2. Verify the checksum: \`sha256sum -c nixos-HOST-TIMESTAMP.iso.sha256\`\n3. Flash to USB: \`dd if=nixos-HOST-TIMESTAMP.iso of=/dev/sdX bs=4M status=progress\`\n4. Boot from USB and follow NixOS installation guide\n\n### Support\n\nFor issues with these images, please check the [repository](${{ github.server_url }}/${{ github.repository }}) or create an issue.\n"
          
          echo "asset_list=$ASSET_LIST" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" > release-notes.md
          
          echo "📋 Release assets prepared:"
          ls -la release-assets-final/
          echo ""
          echo "📝 Release notes preview:"
          head -20 release-notes.md

      - name: 🏷️ Create release tag and name
        id: create-tag
        run: |
          TAG_NAME="nixos-iso-$(date +%Y%m%d-%H%M%S)"
          RELEASE_NAME="NixOS ISO Images - $(date '+%Y-%m-%d %H:%M UTC')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "🏷️  Creating release: $RELEASE_NAME"
          echo "🏷️  Tag: $TAG_NAME"

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create-tag.outputs.tag_name }}
          name: ${{ steps.create-tag.outputs.release_name }}
          body_path: release-notes.md
          files: release-assets-final/*
          draft: false
          prerelease: false
          generate_release_notes: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
